{% extends "::base.html.twig" %}

{% block title %}Game Setup - {% endblock %}

{% block body %}
    <script>
        $(document).ajaxStart(function () {
            $('#pagelock').css('display', 'block');
        });
        $(document).ajaxStop(function () {
            $('#pagelock').css('display', 'none');
        });

        var configObj = {
            buildable: "",
            smins: "",
            subsmins: "",
            magmins: "",
            water: "",
            co2: ""
        };
        configObjString = "";
        var mapId = "";

        $(function () {
            $("#landGrant").selectmenu({
                change: function (event, ui) {
                    var mapIdName = $("#landGrant").val();
                    mapData = mapIdName.split(':');
                    mapId = mapData[0];
                    myMiniMap.performAction("main", mapData[1]);
                    sectorSelected = false;
                    checkApplyConfig();
                }
            });
            $("#landGrant").selectmenu("option", "width", 230);
            $("#subtileconf").tabs();
            $('#checkbox-1').click(function () {
                if (document.getElementById('checkbox-1').checked) {
                    propertiesSelected++;
                    checkApplyConfig();
                    configObj["buildable"] = 'n'
                } else {
                    propertiesSelected--;
                    checkApplyConfig();
                    configObj["buildable"] = 'y'
                }
            });
            $('#checkbox-2').click(function () {
                if (document.getElementById('checkbox-2').checked) {
                    propertiesSelected++;
                    checkApplyConfig();
                    $("#surfaceminerials").selectmenu("enable");
                    configObj["smins"] = $("#surfaceminerials").val();
                } else {
                    propertiesSelected--;
                    checkApplyConfig();
                    $("#surfaceminerials").selectmenu("disable");
                    configObj["smins"] = "none";
                }
            });
            $('#checkbox-3').click(function () {
                if (document.getElementById('checkbox-3').checked) {
                    propertiesSelected++;
                    checkApplyConfig();
                    $("#subsurfaceminerials").selectmenu("enable");
                    configObj["subsmins"] = $("#subsurfaceminerials").val();
                } else {
                    propertiesSelected--;
                    checkApplyConfig();
                    $("#subsurfaceminerials").selectmenu("disable");
                    configObj["subsmins"] = "none";
                }
            });
            $('#checkbox-4').click(function () {
                if (document.getElementById('checkbox-4').checked) {
                    propertiesSelected++;
                    checkApplyConfig();
                    $("#magmaminerials").selectmenu("enable");
                    configObj["magmins"] = $("#magmaminerials").val();
                } else {
                    propertiesSelected--;
                    checkApplyConfig();
                    $("#magmaminerials").selectmenu("disable");
                    configObj["magmins"] = "none";
                }
            });
            $("#surfaceminerials").selectmenu();
            $("#surfaceminerials").selectmenu({
                change: function (event, ui) {
                    configObj["smins"] = $("#surfaceminerials").val();
                }
            });
            $("#surfaceminerials").selectmenu("disable");
            $("#subsurfaceminerials").selectmenu();
            $("#subsurfaceminerials").selectmenu({
                change: function (event, ui) {
                    configObj["subsmins"] = $("#subsurfaceminerials").val();
                }
            });
            $("#subsurfaceminerials").selectmenu("disable");
            $("#magmaminerials").selectmenu();
            $("#magmaminerials").selectmenu({
                change: function (event, ui) {
                    configObj["magmins"] = $("#magmaminerials").val();
                }
            });
            $("#magmaminerials").selectmenu("disable");
            $('#checkbox-5').click(function () {
                if (document.getElementById('checkbox-5').checked) {
                    propertiesSelected++;
                    checkApplyConfig();
                    configObj["water"] = "y";
                } else {
                    propertiesSelected--;
                    checkApplyConfig();
                    configObj["water"] = "n";
                }
            });
            $('#checkbox-6').click(function () {
                if (document.getElementById('checkbox-6').checked) {
                    propertiesSelected++;
                    checkApplyConfig();
                    configObj["co2"] = "y";
                } else {
                    propertiesSelected--;
                    checkApplyConfig();
                    configObj["co2"] = "n";
                }
            });

            $("#applyConfig").button();
            $("#applyConfig").button("disable");
            $("#clearConfig").button();
            $("#clearConfig").button("disable");
            $("#resetSectorConfig").button();
            $("#resetSectorConfig").button("disable");
            $("#commitConfig").button();
            $("#commitConfig").button("disable");
            $("#configDetails").dialog({
                open: function (event, ui) {
                    $(".ui-dialog-titlebar-close", ui.dialog | ui).hide();
                },
                autoOpen: false
            });
        });
    </script>
    <div id="pagelock">
        <div id="displayloadingicon" style="background:url('{{ imgLibrary }}/pleasewait.svg');">
        </div>
    </div>
    {% spaceless %}
    {# Page Title #}
    <div style="width: 100%; font-family: Orbitron; font-size: 1em; font-weight: bold; text-align: center;">
        The Game - Setup
    </div>
    {# Page Body #}
    {# Map Area #}
    <div id="maparea">
        {# Mini Map Section #}
        <div id="minimapsection">
            <div id="minimapdisplay">
                <div class="infobox">
                    <label for="landGrant" class="UYBGFont_075em">Mar's Land Grant: </label>
                    <select name="landGrant" id="landGrant" class="UYBGFont_075em">
                        {% for mapRow in mapNameResults %}
                            <option class="removeIcon"
                                    value="{{ mapRow["id"] }}:{{ mapRow["mapImageUrl"] }}">{{ mapRow["mapName"] }}</option>
                            {% if loop.first %}
                            <script>
                                mapId = {{ mapRow["id"] }};
                            </script>
                            {% endif %}
                        {% endfor %}
                    </select>
                </div>
            </div>
            <div id="minimapsubsection">
                <div id="miniMap"></div>
                <div class="infobox">
                    <p id="selectedSector" class="UYBGFont_075em">Sector Selected: None </p>
                </div>
            </div>
            <div id="minimapinstruction" class="divborder">
                <p class="UYBGFont_1em" style="margin: 2px 4px 2px 4px;">Legend</p>
                <div style="width: 100%">
                    <svg width="100%" height="75px">
                        <rect x="0" y="0" width="45" height="75" fill="#663300"></rect> {#Brown#}
                        <rect x="10" y="10" width="25" height="25" stroke="#33ffff" fill="#33ffff"
                              style="fill-opacity: 0.5"></rect>
                        <text x="50" y="25" class="UYBGFont_075em">
                            Previously configurated grid. You have to mark
                        </text>
                        <text x="50" y=38 class="UYBGFont_075em">
                            grid to change.
                        </text>
                        <rect x="10" y="40" width="25" height="25" stroke="yellow" fill="none"></rect>
                        <text x="50" y="60" class="UYBGFont_075em">
                            Properties will be applied to Grid when applied.
                        </text>
                    </svg>
                    <p class="UYBGFont_1em" style="margin: 2px 4px 2px 4px;">Instructions</p>
                    <p class="UYBGFont_080em" style="margin: 2px 4px 2px 4px;">
                        &ndash; Select the Mar's Land Grant to be config'ed.<br>
                    </p>
                    <p class="UYBGFont_080em" style="margin: 2px 4px 2px 4px;">
                        &ndash; Click sector on the mini-map.<br>
                    </p>
                    <p class="UYBGFont_080em" style="margin: 2px 4px 2px 4px;">
                        &ndash; On the sector map (Right), click grid and select &nbsp;&nbsp;&nbsp;&nbsp;properties
                        (Panel below).<br>
                    </p>
                    <p class="UYBGFont_080em" style="margin: 2px 4px 2px 4px;">
                        &ndash; Click "Apply Config" and repeat until done.<br>
                    </p>
                    <p class="UYBGFont_080em" style="margin: 2px 4px 2px 4px;">
                        &ndash; When the sector is done, click "Commit Config".
                    </p>
                </div>
            </div>
        </div>
        {# Main Map Section #}
        <div id="mainmapsection">
            <div id="mainMap" style="display: inline; white-space: nowrap;">
                <div id="configDetails">
                    <p class="UYBGFont_1em" style="margin: 2px 4px 4px 4px;">Buildable:
                        <scan id="configDetailsBuildable" class="UYBGFont_1em" style="margin: 2px 4px 2px 28px;">
                        </scan>
                    </p>
                    <p class="UYBGFont_1em" style="margin: 2px 4px 4px 4px;">Surface<br>Minerials:
                        <scan id="configDetailsSurfaceMaterial" class="UYBGFont_1em" style="margin: 2px 4px 2px 30px;">
                        </scan>
                    </p>
                    <p class="UYBGFont_1em" style="margin: 2px 4px 4px 4px;">Sub-Surface<br>Minerials:
                        <scan id="configDetailsSubSurfaceMaterial" class="UYBGFont_1em"
                              style="margin: 2px 4px 2px 30px;">
                        </scan>
                    </p>
                </div>
            </div>
        </div>
    </div>
    {# Map Configuration Area #}
    <div id="toolbarsection" class="divborder">
        <div id="quicklist" style="float: left; width: 150px;">
            <p class="UYBGFont_075em" style="margin: .5em 0em .5em 1em;">Quick Links</p>
            <ul>
                <li style="margin: 5px 0px 0px 0px;">
                    <a class="UYBGFont_075em" style="margin-left: .25em" href="{{ path('crud_maps_index') }}">List
                        of All Maps</a>
                </li>
                <li style="margin: 5px 0px 0px 0px;">
                    <a class="UYBGFont_075em" style="margin-left: .25em" href="{{ path('crud_tiles_index') }}">List
                        of All Tiles</a>
                </li>
            </ul>
        </div>
        <div class="UYBGFont_1em_AlignCenter" style="margin-top: 2px;">Sub-Tile Configuration</div>
        <div id="subtileconf" class="UYBGFont_075em" style="float: right;height: 92%;width: 80%;">
            <ul>
                <li class="removeIcon"><a href="#tabs-1" class="UYBGFont_1em_AlignCenter">Properties</a></li>
                <li class="removeIcon"><a href="#tabs-2" class="UYBGFont_1em_AlignCenter">Settings</a></li>
                <li class="removeIcon"><a href="#tabs-3" class="UYBGFont_1em_AlignCenter">Sector Analysis</a></li>
            </ul>
            <div id="tabs-1">
                <div class="divTable">
                    <div class="divTableBody">
                        <div class="divTableRow">
                            <div class="divTableCell" style="width: 55%">
                                <fieldset style="border: none; margin: 0px;">
                                    <input type="checkbox" name="checkbox-1" id="checkbox-1"
                                           style="margin-bottom: 10px;"><span
                                            class="UYBGFont_1em" style="margin-bottom: 15px;">NOT Buildable</span><br>
                                    <input type="checkbox" name="checkbox-2" id="checkbox-2"
                                           style="margin-bottom: 10px;"><span
                                            class="UYBGFont_1em">Surface Minerials </span>
                                    <select name="surfaceminerials" id="surfaceminerials" class="UYBGFont_075em"
                                            style="margin-left: 5px;">
                                        <option class="removeIcon" value="AL">Aluminium Oxide</option>
                                        <option class="removeIcon" value="CA">Calcium Oxide</option>
                                        <option class="removeIcon" value="CR">Chromium Oxide</option>
                                        <option class="removeIcon" value="GY">Gypsum</option>
                                        <option class="removeIcon" value="FE">BlueBerries (FeO)</option>
                                        <option class="removeIcon" value="MA">Magnetite</option>
                                        <option class="removeIcon" value="SC">Silicate</option>
                                        <option class="removeIcon" value="TI">Titanium Oxide</option>
                                    </select><br>
                                    <input type="checkbox" name="checkbox-3" id="checkbox-3"
                                           style="margin-bottom: 10px;"><span
                                            class="UYBGFont_1em">Sub-Surface Minerials </span>
                                    <select name="subsurfaceminerials" id="subsurfaceminerials" class="UYBGFont_1em">
                                        <option class="removeIcon" value="AL">Aluminium Oxide</option>
                                        <option class="removeIcon" value="CA">Calcium Oxide</option>
                                        <option class="removeIcon" value="CR">Chromium Oxide</option>
                                        <option class="removeIcon" value="CU">Copper Oxide</option>
                                        <option class="removeIcon" value="AU">Gold Oxide</option>
                                        <option class="removeIcon" value="GY">Gypsum</option>
                                        <option class="removeIcon" value="FE">Iron Oxide</option>
                                        <option class="removeIcon" value="PB">Lead Oxide</option>
                                        <option class="removeIcon" value="LI">Lithium Oxide</option>
                                        <option class="removeIcon" value="LI">Magnetite</option>
                                        <option class="removeIcon" value="NI">Nickel Oxide</option>
                                        <option class="removeIcon" value="PT">Platium Oxide</option>
                                        <option class="removeIcon" value="SC">Silicate</option>
                                        <option class="removeIcon" value="AG">Silver Oxide</option>
                                        <option class="removeIcon" value="SN">Tin Oxide</option>
                                        <option class="removeIcon" value="TI">Titanium Oxide</option>
                                        <option class="removeIcon" value="W">Tungsten Oxide</option>
                                        <option class="removeIcon" value="ZN">Zinc Oxide</option>
                                    </select><br>
                                    <input type="checkbox" name="checkbox-4" id="checkbox-4"
                                           style="margin-bottom: 10px;"><span
                                            class="UYBGFont_1em">Magma Minerials </span>
                                    <select name="magmaminerials" id="magmaminerials" class="UYBGFont_075em"
                                            style="margin-left: 5px;">
                                        <option class="removeIcon" value="PB">Lead Oxide</option>
                                        <option class="removeIcon" value="AG">Silver Oxide</option>
                                        <option class="removeIcon" value="SN">Tin Oxide</option>
                                        <option class="removeIcon" value="TI">Titanium Oxide</option>
                                    </select><br>
                                    <input type="checkbox" name="checkbox-5" id="checkbox-5"
                                           style="margin-bottom: 10px;"><span
                                            class="UYBGFont_1em">Frozen Water</span><br>
                                    <input type="checkbox" name="checkbox-6" id="checkbox-6"
                                           style="margin-bottom: 10px;"><span
                                            class="UYBGFont_1em">Frozen CO2</span><br>
                                </fieldset>
                                <button id="applyConfig" class="ui-button ui-widget ui-corner-all">Apply Config</button>
                            </div>
                            <div class="divTableCell" style="align: center;">
                                <p class="UYBGFont_1em">
                                    When you click Clear, it will remove all previous configured data for the selected
                                    cells.
                                    Reset will clear the whole sector.
                                </p>
                                <button id="clearConfig" class="ui-button ui-widget ui-corner-all">Clear Config
                                </button>
                                <span>&nbsp;&nbsp;&nbsp;</span>
                                <button id="resetSectorConfig" class="ui-button ui-widget ui-corner-all">Reset Sector
                                </button>
                                <p class="UYBGFont_1em">
                                    When you click the "Commit Config" button, it will save the previous configuration
                                    and the
                                    additions / changes for this sector.
                                </p>
                                <button id="commitConfig" class="ui-button ui-widget ui-corner-all">Commit Config
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div id="tabs-2">
                <div class="divTableCell" style="width: 55%">
                    <fieldset style="border: none; margin: 0px;">
                        <input type="checkbox" name="checkbox-DG" id="checkbox-DG">
                        <span class="UYBGFont_1em" style="margin-bottom: 15px;">Display Grid Details</span><br>
                        <input type="checkbox" name="checkbox-DGOC" id="checkbox-DGOC"
                               style="margin-left: 20px; margin-bottom: 10px;"
                               onclick="$('#checkbox-DG').prop('checked', true);">
                        <span class="UYBGFont_1em" style="margin-bottom: 15px;">Only Configured Grids</span><br>
                    </fieldset>
                </div>
            </div>
            <div id="tabs-3">
                <p>Mauris eleifend est et turpis. Duis id erat. Suspendisse potenti. Aliquam vulputate, pede vel
                    vehicula accumsan, mi neque rutrum erat, eu congue orci lorem eget lorem. Vestibulum non ante. Class
                    aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Fusce sodales.
                    Quisque eu urna vel enim commodo pellentesque. Praesent eu risus hendrerit ligula tempus pretium.
                    Curabitur lorem enim, pretium nec, feugiat nec, luctus a, lacus.</p>
                <p>Duis cursus. Maecenas ligula eros, blandit nec, pharetra at, semper at, magna. Nullam ac lacus. Nulla
                    facilisi. Praesent viverra justo vitae neque. Praesent blandit adipiscing velit. Suspendisse
                    potenti. Donec mattis, pede vel pharetra blandit, magna ligula faucibus eros, id euismod lacus dolor
                    eget odio. Nam scelerisque. Donec non libero sed nulla mattis commodo. Ut sagittis. Donec nisi
                    lectus, feugiat porttitor, tempor ac, tempor vitae, pede. Aenean vehicula velit eu tellus interdum
                    rutrum. Maecenas commodo. Pellentesque nec elit. Fusce in lacus. Vivamus a libero vitae lectus
                    hendrerit hendrerit.</p>
            </div>
        </div>
        <script>
            var miniWidth = 375, miniHeight = 175, borderWidth = 10, displayBorderColor = "#50a8d5", gridWidth = 25, turquoise = "#33ffff";
            var sectorSelected = false, propertiesSelected = 0, gridSelected = 0;
            var myMiniMap = new MiniMap();
            myMiniMap.performAction("init", "/MapsMaster-001.jpg");
            //
            var myMainMap = new MainMap();
            myMainMap.performAction("init");

            function MiniMap() {

                if (arguments.callee._singletonInstance) {
                    return arguments.callee._singletonInstance;
                }

                arguments.callee._singletonInstance = this;

                this.performAction = function (action, mapName) {

                    switch (action) {
                        case "init":
                            //Create miniMapSVG and border
                            var miniMapSVG = this.buildMiniSVGBorder();

                            //Load Image into miniMap
                            this.buildMiniImage(miniMapSVG, "{{ imgLibrary }}" + mapName);

                            this.buildMiniMapGrid(miniMapSVG, miniWidth / gridWidth, miniHeight / gridWidth, mapName);

                            break;
                        case "main":
                            myMainMap.performAction("reset");

                            //Replace HTML Div Mini Map
                            d3.select("div#miniMap").remove();
                            var div = document.createElement("div");
                            div.id = "miniMap";
                            div.style = "display: inline; white-space: nowrap;";
                            document.getElementById("minimapsubsection").appendChild(div);

                            //Create miniMapSVG and border
                            var miniMapSVG = this.buildMiniSVGBorder();

                            //Load Image into mainMap
                            this.buildMiniImage(miniMapSVG, "{{ imgLibrary }}" + mapName);

                            this.buildMiniMapGrid(miniMapSVG, miniWidth / gridWidth, miniHeight / gridWidth, mapName);
                            break;
                        default:
                            alert("MiniMap has been called with invalid action. [" + action + "]")
                    }
                }

                this.buildMiniSVGBorder = function () {
                    //Create miniMapSVG
                    var miniMapSVG = d3.select("div#miniMap").append("svg")
                            .attr("width", miniWidth + borderWidth)
                            .attr("height", miniHeight + borderWidth)
                            .attr("id", "miniMapSVG");
                    //Create MiniMapBorder
                    miniMapSVG.append("rect")
                            .attr("x", "0")
                            .attr("y", "0")
                            .attr("rx", 15)
                            .attr("ry", 15)
                            .attr("width", miniWidth + borderWidth)
                            .attr("height", miniHeight + borderWidth)
                            .attr("fill", "white")
                            .attr("stroke", displayBorderColor)
                            .attr("stroke-width", borderWidth);
                    return miniMapSVG;
                }

                this.buildMiniImage = function (miniMapSVG, fullMapName) {
                    //Load Image into MiniMap
                    miniMapSVG.append("image")
                            .attr("xlink:href", fullMapName)
                            .attr("x", borderWidth / 2)
                            .attr("y", borderWidth / 2)
                            .attr("width", miniWidth)
                            .attr("height", miniHeight);
                }

                //Build the mini Map Grid
                this.buildMiniMapGrid = function (miniMapSVG, x, y, mapName) {
                    for (rectX = 0; rectX < x; rectX++) {
                        for (rectY = 0; rectY < y; rectY++) {
                            var rects = miniMapSVG.append("rect")
                                    .attr("x", rectX * gridWidth + borderWidth / 2)
                                    .attr("y", rectY * gridWidth + borderWidth / 2)
                                    .attr("width", gridWidth)
                                    .attr("height", gridWidth)
                                    .attr("fill", "white")
                                    .style("fill-opacity", 0.0)
                                    .attr("stroke-miniWidth", 1)
                                    .attr("stroke", "antiquewhite")
                                    .attr("id", "mini" + "/" + rectX + "/" + rectY)
                                    .on("click", function () {
                                        sectorSelected = true;
                                        checkApplyConfig();
                                        checkresetSectorConfig();
                                        var myMainMap = new MainMap();
                                        myMainMap.performAction("main", this.id, mapName);
                                    });
                        }
                    }
                }
            }

            function MainMap() {

                if (arguments.callee._singletonInstance) {
                    return arguments.callee._singletonInstance;
                }

                arguments.callee._singletonInstance = this;

                this.performAction = function (action, rectID, mapName) {
                    switch (action) {
                        case "init":
                            //Create mainMapSVG and Border
                            var mainMapSVG = this.buildMainSVGBorder();

                            //Load Image into mainMap
                            this.buildMainImage(mainMapSVG, "{{ imgLibrary }}/DisplaySnow-blue.gif");

                            //Load text on display snow
                            mainMapSVG.append("text").text("Click on a the mini map to zoom in on a sector.")
                                .attr("x", "25")
                                .attr("y", "25")
                                .attr("font-family", "Orbitron")
                                .attr("font-size", "1em")
                                .attr("fill", "black");
                            break;
                        case "main":
                            var xy = rectID.split("/");
                            setSectorSelectedLabel(xy);

                            // Construct the Main Map
                            this.reconstructMainMapDiv();
                            //Create mainMapSVG and Border
                            var mainMapSVG = this.buildMainSVGBorder();
                            //Load Image into mainMap
                            var shortMapName = mapName.substr(0, mapName.length - 4);
                            this.buildMainImage(mainMapSVG, "{{ imgLibrary }}" + shortMapName + "-" + xy[1] + "-" + xy[2] + ".jpg");
                            //Build Main Map Grid
                            this.buildMainGrid(mainMapSVG);

                            // Get Tile Data
                            getTileData(mainMapSVG);
                            break;
                        case "reset":
                            setSectorSelectedLabel("reset");
                            var mySelectedSector = document.getElementById("selectedSector");
                            mySelectedSector.innerText = "Sector Selected: None";

                            this.reconstructMainMapDiv();

                            //Create mainMapSVG and Border
                            var mainMapSVG = this.buildMainSVGBorder();

                            //Load Image into mainMap
                            this.buildMainImage(mainMapSVG, "{{ imgLibrary }}/DisplaySnow-blue.gif");

                            //Load text on display snow
                            mainMapSVG.append("text").text("Click on a the mini map to zoom in on a sector.")
                                .attr("x", "25")
                                .attr("y", "25")
                                .attr("font-family", "Orbitron")
                                .attr("font-size", "1em")
                                .attr("fill", "black");
                            break;
                        default:
                            alert("MainMap has been called with invalid action. [" + action + "]")
                    }
                }

                this.buildMainSVGBorder = function () {
                    //Create mainMapSVG
                    var mainMapSVG = d3.select("div#mainMap").append("svg")
                        .attr("width", 500 + borderWidth)
                        .attr("height", 500 + borderWidth)
                        .attr("id", "mainMapSVG");
                    //Create MainMapBorder
                    mainMapSVG.append("rect")
                        .attr("x", 0)
                        .attr("y", 0)
                        .attr("rx", 15)
                        .attr("ry", 15)
                        .attr("width", 500 + borderWidth)
                        .attr("height", 500 + borderWidth)
                        .attr("fill", "white")
                        .attr("stroke", displayBorderColor)
                        .attr("stroke-width", borderWidth);
                    return mainMapSVG;
                }

                this.buildMainImage = function (mainMapSVG, fileName) {
                    mainMapSVG.append("image")
                        .attr("xlink:href", fileName)
                        .attr("x", borderWidth / 2)
                        .attr("y", borderWidth / 2)
                        .attr("width", 500)
                        .attr("height", 500);
                }

                this.buildMainGrid = function (mainMapSVG) {
                    //Build the Main Map Grid
                    for (rectX = 0; rectX < 20; rectX++) {
                        for (rectY = 0; rectY < 20; rectY++) {
                            var rects = mainMapSVG.append("rect")
                                .attr("x", rectX * 25 + borderWidth / 2)
                                .attr("y", rectY * 25 + borderWidth / 2)
                                .attr("width", 25)
                                .attr("height", 25)
                                .style("fill-opacity", 0.0)
                                .attr("id", "main" + "/" + rectX + "/" + rectY)
                                .on("click", function () {
                                    var myMainMap = new MainMap();
                                    myMainMap.markGridForConfig(this.id, mainMapSVG);
                                })
                                .on("mouseover", function () {
                                    if ($("#checkbox-DG").prop("checked")) {
                                        var myMainMap = new MainMap();
                                        myMainMap.determineDisplayGridConfig(this.id, mainMapSVG);
                                    }
                                })
                                .on("mouseout", function () {
                                    $("#configDetails").dialog("close");
                                })
                        }
                    }
                }

                this.reconstructMainMapDiv = function () {
                    //Replace HTML Div Main Map
                    d3.select("div#mainMap").remove();
                    var div = document.createElement("div");
                    div.id = "mainMap";
                    div.style = "display: inline; white-space: nowrap;";
                    document.getElementById("mainmapsection").appendChild(div);
                }

                this.markGridForConfig = function (rectID, mainMapSVG) {
                    var elem = document.getElementById(rectID);
                    if (elem.getAttribute("marked") == "yes") {
                        gridSelected--;
                        checkApplyConfig();
                        checkClearConfig();
                        elem.removeAttribute("marked");
                        if (elem.getAttribute("populated") == "yes") {
                            markGrid(rectID, "populate");
                        } else {
                            markGrid(rectID, "clear");
                        }
                    } else {
                        gridSelected++;
                        checkApplyConfig();
                        checkClearConfig();
                        elem.setAttribute("marked", "yes");
                        markGrid(rectID, "mark");
                    }
                }
                this.determineDisplayGridConfig = function (rectID, mainMapSVG) {
                    if ($("#checkbox-DGOC").prop("checked")) {
                        var elem = document.getElementById(rectID);
                        if (elem.getAttribute("populated") == "yes") {
                            this.displayGridConfig(rectID, mainMapSVG);
                        }
                    } else {
                        this.displayGridConfig(rectID, mainMapSVG);
                    }
                }
                this.displayGridConfig = function (rectID, mainMapSVG) {
                    var elem = document.getElementById(rectID);
                    $("#configDetails").dialog("option", "position", {my: "left top", at: "left bottom", of: elem});
                    if (elem.getAttribute("buildable") == "n") {
                        $("#configDetailsBuildable").text("No");
                    } else {
                        $("#configDetailsBuildable").text("Yes");
                    }
                    $("#configDetailsSurfaceMaterial").text(elem.getAttribute("smins"));
                    $("#configDetailsSubSurfaceMaterial").text(elem.getAttribute("subsmins"));
                    var myRectIDParts = rectID.split("/");
                    $("#configDetails").dialog("option", "title", "Grid Col: " + myRectIDParts[1] + " Row: " + myRectIDParts[2]);
                    $("#configDetails").dialog("open");
                }
            }

            function setSectorSelectedLabel(xy) {
                var mySelectedSector = document.getElementById("selectedSector");
                if (xy == 'reset') {
                    mySelectedSector.innerText = "Sector Selected: None";
                } else {
                    mySelectedSector.innerText = "Sector Selected: Col=" + xy[1] + " Row=" + xy[2];
                }
            }

            function getTileData(mainMapSVG) {
                var tileData = new Object();
                formatColRow(tileData);
                jsonTileData = JSON.stringify(tileData);
                var jqxhr = $.post("http://mybitnami:8000/setup/readconfig", jsonTileData.toString(), function (reply) {
                    var configData = JSON.parse(htmlEntities(reply));
                    for (index = 0; index < configData.length; index++) {
                        addDataToGrid("main" + "/" + configData[index]['cellcol'] + "/" + configData[index]['cellrow'],
                                configData[index]['cellconfig']['buildable'],
                                configData[index]['cellconfig']['smins'],
                                configData[index]['cellconfig']['subsmins'],
                                configData[index]['cellconfig']['magmins'],
                                configData[index]['cellconfig']['water'],
                                configData[index]['cellconfig']['co2']
                        );
                        markGrid("main" + "/" + configData[index]['cellcol'] + "/" + configData[index]['cellrow'], "populate");
                    }
                })
                        .fail(function (jqxhr) {
                            if (!jqxhr.status == 404) {
                                alert("error:" + jqxhr.responseText);
                            }
                        });
            }


            function checkApplyConfig() {
                if (sectorSelected & propertiesSelected > 0 & gridSelected > 0) {
                    $("#applyConfig").button("enable");
                } else {
                    $("#applyConfig").button("disable");
                }
            }

            function checkClearConfig() {
                if (sectorSelected & gridSelected > 0) {
                    $("#clearConfig").button("enable");
                } else {
                    $("#clearConfig").button("disable");
                }
            }

            function checkresetSectorConfig() {
                if (sectorSelected) {
                    $("#resetSectorConfig").button("enable");
                } else {
                    $("#resetSectorConfig").button("disable");
                }
            }

            function mapLoc(row, col, config) {
                this.cellrow = row;
                this.cellcol = col;
                this.cellconfig = config;
            }

            function formatColRow(tileData) {
                var mySelectedSector = document.getElementById("selectedSector").innerText.split(":");
                var mySSColRow = mySelectedSector[1].toString().replace(",", "").replace(",", "").split(" ");
                tileData['mapid'] = mapId;
                tileData['colrow'] = mySSColRow[1].toString() + ' ' + mySSColRow[2].toString();
            }

            function htmlEntities(str) {
                return String(str).replace(/&amp/g, '&;').replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '"');
            }

            function addDataToGrid(rectID, buildable, smins, subsmins, magmins, water, co2) {
                var elem = document.getElementById(rectID);
                elem.setAttribute("populated", "yes");
                elem.setAttribute("buildable", buildable);
                elem.setAttribute("smins", smins);
                elem.setAttribute("subsmins", subsmins);
                elem.setAttribute("magmins", magmins);
                elem.setAttribute("water", water);
                elem.setAttribute("co2", co2);
            }

            function removeDataFromGrid(rectID) {
                var elem = document.getElementById(rectID);
                elem.removeAttribute("populated");
                elem.removeAttribute("buildable");
                elem.removeAttribute("smins");
                elem.removeAttribute("subsmins");
                elem.removeAttribute("magmins");
                elem.removeAttribute("water");
                elem.removeAttribute("co2");
                elem.removeAttribute("marked");
            }

            function markGrid(rectID, markType) {
                var elem = document.getElementById(rectID);
                switch (markType) {
                    case "mark":
                        elem.setAttribute("stroke", "yellow");
                        elem.setAttribute("stroke-width", 2);
                        elem.setAttribute("style", "fill-opacity: 0.0");
                        break;
                    case "populate":
                        elem.setAttribute("stroke", turquoise);
                        elem.setAttribute("stroke-width", 2);
                        elem.setAttribute("fill", turquoise);
                        elem.setAttribute("style", "fill-opacity: 0.5");
                        break;
                    case "clear":
                        elem.removeAttribute("stroke");
                        elem.removeAttribute("stroke-width");
                        elem.setAttribute("style", "fill-opacity: 0.0");
                        break;
                    default:
                        alert("Invalid markType passed to markGrid. [" + markType + "]")
                }
            }

            function resetProperties() {
                document.getElementById('checkbox-1').checked = false;
                configObj["buildable"] = 'n'
                document.getElementById('checkbox-2').checked = false;
                $("#surfaceminerials").selectmenu("disable");
                configObj["smins"] = "none";
                document.getElementById('checkbox-3').checked = false;
                $("#subsurfaceminerials").selectmenu("disable");
                configObj["subsmins"] = "none";
                document.getElementById('checkbox-4').checked = false;
                $("#magmaminerials").selectmenu("disable");
                configObj["magmins"] = "none";
                $("#surfaceminerials").selectmenu("disable");
                $("#subsurfaceminerials").selectmenu("disable");
                $("#magmaminerials").selectmenu("disable");
                document.getElementById('checkbox-5').checked = false;
                configObj["water"] = "n";
                document.getElementById('checkbox-6').checked = false;
                configObj["co2"] = "n";
                propertiesSelected = 0;
                checkApplyConfig();
            }

            $("#applyConfig").button().click(function () {
                for (r = 0; r < 20; r++) {
                    for (c = 0; c < 20; c++) {
                        if (document.getElementById("main/" + c + "/" + r).getAttribute("marked")) {
                            addDataToGrid("main/" + c + "/" + r, configObj["buildable"], configObj["smins"], configObj["subsmins"], configObj["magmins"], configObj["water"], configObj["co2"]);
                            markGrid("main/" + c + "/" + r, "populate");
                        }
                    }
                }
                $("#commitConfig").button("enable");
            });
            $("#clearConfig").button().click(function () {
                for (r = 0; r < 20; r++) {
                    for (c = 0; c < 20; c++) {
                        if (document.getElementById("main/" + c + "/" + r).getAttribute("marked")) {
                            removeDataFromGrid("main/" + c + "/" + r);
                            markGrid("main/" + c + "/" + r, "clear");
                        }
                    }
                }
                $("#commitConfig").button("enable");
            });
            $("#resetSectorConfig").button().click(function () {
                for (r = 0; r < 20; r++) {
                    for (c = 0; c < 20; c++) {
                        removeDataFromGrid("main/" + c + "/" + r);
                        markGrid("main/" + c + "/" + r, "clear");
                    }
                }
                $("#commitConfig").button("enable");
            });
            $("#commitConfig").button().click(function () {
                $("#commitConfig").button("disable");
                var mapLocations = new Array(), ptr = 0;
                for (r = 0; r < 20; r++) {
                    for (c = 0; c < 20; c++) {
//
//                        Needs to be changed to read attributes
//
//                        if (document.getElementById("main/" + c + "/" + r).getAttribute("populated")) {
//                            var myMapLoc = new mapLoc(r, c, configObj);
//                            mapLocations[ptr++] = myMapLoc;
//                            var myMapLoc = null;
//                        }
                    }
                }
                alert("Changes Needed Here!!!!!!");
                var tileData = new Object();
                formatColRow(tileData);
                tileData['configdata'] = mapLocations;
                jsonTileData = JSON.stringify(tileData);
                var jqxhr = $.post("http://mybitnami:8000/setup/saveconfig", jsonTileData.toString(), function (reply) {
                    resetProperties();
                    alert("success: " + reply);
                })
                        .fail(function () {
                            alert("error");
                        })
                        .always(function () {
                            alert("Changes Saved");
                        })
            });
        </script>
        {% endspaceless %}
{% endblock %}